import Head from "next/head";

import { api } from "~/utils/api";
import { useState } from "react";
import jdvlogo from "~/assets/img/jdvlogo.png";
import Image from "next/image";
import Link from "next/link";
export default function Home() {
  const [inputString, setInputString] = useState("");
  const calculate = api.api.calculate.useMutation();
  const stats = api.api.getStats.useQuery();
  const [view, setView] = useState<"input" | "output" | "error" | "stats">(
    "input",
  );

  if (typeof window !== "undefined") {
    document.onkeydown = function (e) {
      const validKeys = [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "0",
        "-",
        "+",
        "*",
        "/",
        "(",
        ")",
        "^",
        "Numpad1",
        "Numpad2",
        "Numpad3",
        "Numpad4",
        "Numpad5",
        "Numpad6",
        "Numpad7",
        "Numpad8",
        "Numpad9",
        "Numpad0",
        "NumpadSubtract",
        "NumpadAdd",
        "NumpadMultiply",
        "NumpadDivide",
        "NumpadParenLeft",
        "NumpadParenRight",
      ];

      if (view !== "stats") {
        if (validKeys.includes(e.key)) {
          setInputString((prev) => prev + e.key);
        }

        if (e.key === "Backspace") {
          setInputString((prev) => prev.slice(0, -1));
        }

        if (e.key === "Enter") {
          if (view === "output" || view === "error") {
            setInputString("");
            setView("input");
            return;
          }

          console.log("InputString: ", inputString);
          calculate.mutate(
            { expression: inputString },
            {
              onSuccess: () => setView("output"),
              onError: () => setView("error"),
            },
          );
        }
      } else {
        if (e.key === "Escape") {
          setView("input");
        }
      }
    };
  }

  const MainView = (): JSX.Element => (
    <>
      <button
        className="rounded-md border border-white p-2 transition-colors hover:bg-white hover:text-slate-900"
        onClick={(e) => {
          e.preventDefault();
          setView("stats");
        }}
        disabled={!stats.isSuccess}
      >
        View Stats
      </button>
      <div className="mb-auto mt-auto flex min-h-full flex-col items-center justify-center text-6xl">
        {view === "input"
          ? inputString === ""
            ? "Type to get started..."
            : inputString
          : view === "error"
            ? "Error"
            : calculate.isLoading
              ? "Calculating..."
              : calculate.data}
      </div>
    </>
  );

  const StatsView = (): JSX.Element => (
    <div className="p-2">
      <div className="flex flex-col gap-8">
        <div className="text-center text-6xl underline">Stats</div>
        <div className="flex flex-col gap-2">
          <div className="text-center text-2xl">
            Number of Calculations:{" "}
            {stats.data.correct + stats.data.incorrect}
          </div>
          <div className="text-center text-3xl">
            Correct & Incorrect Answers
          </div>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>Correct: {stats.data?.correct}</div>
            <div>Incorrect: {stats.data?.incorrect}</div>
            <div>
              Accuracy:{" "}
              {stats.data &&
                (stats.data.correct /
                  (stats.data.correct + stats.data.incorrect)) *
                  100}
              %
            </div>
          </div>
        </div>
        <div className="flex flex-col gap-2">
          <div className="text-center text-3xl">Error Sizes</div>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              Largest Error: {stats.data?.largestOffset?.offset}
            </div>
            <div>
              Smallest Error: {stats.data?.smallestOffset?.offset}
            </div>
            <div>
              Average Error:{" "}
              {stats.data?.averageOffset._avg.offset}
            </div>
          </div>
        </div>
      </div>
      <div className="flex w-full flex-col justify-center p-4">
        <button
          className="rounded-md border border-white p-2 transition-colors hover:bg-white hover:text-slate-900"
          onClick={(e) => {
            e.preventDefault();
            setView("input");
          }}
        >
          Close Stats
        </button>
      </div>
    </div>
  );
  return (
    <>
      <Head>
        <title>Unreliable Calculator - JDVivian</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="font-hand relative flex min-h-screen flex-col items-center gap-4 bg-slate-900 p-8 font-bold text-white">
        <Link href="https://jdvivian.co.uk">
          <Image
            src={jdvlogo}
            alt="JDV Logo"
            width={50}
            height={50}
            className="absolute left-5 top-5 rounded-full border-2 border-white p-1 transition-all duration-300 hover:border-black hover:bg-black hover:invert hover:filter"
          />
        </Link>
        <div className="relative text-7xl">
          <div>Unreliable Calculator</div>
          {stats.isSuccess && (
            <div className="absolute -right-2 top-20 rotate-12 text-xl">
              {(stats.data.correct /
                (stats.data.correct + stats.data.incorrect)) *
                100}
              % reliable!
            </div>
          )}
        </div>
        {view === "stats" ? <StatsView /> : <MainView />}

        {view === "stats" && (
          <>
            <div>
              This calculator uses ChatGPT to perform all calculations. The
              results are verified and statistics about accuracy stored.
            </div>
            <div className="text-sm">
              Only accuracy information is stored. No other calculation
              information is stored.
            </div>
          </>
        )}
      </main>
    </>
  );
}
